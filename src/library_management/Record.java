/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package library_management;
import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author Jerkeen
 */
public class Record extends javax.swing.JFrame {
    private boolean isAscending = true;

    /**
     * Creates new form Record
     */
    public Record() {
        initComponents();
        loadTableData();
        addSearchFieldListener();
    }
    
    private void loadTableData() {
        String sql = "SELECT * FROM book_tbl";
        try (Connection conn = new Conn().getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {

            // Get the table model
            DefaultTableModel model = (DefaultTableModel) bookTable.getModel();

            // Clear existing rows
            model.setRowCount(0);

            // Populate table with query results
            while (rs.next()) {
                model.addRow(new Object[] {
                    rs.getInt("book_id"),
                    rs.getString("BookNumber"),
                    rs.getString("Name"),
                    rs.getString("Publisher"),
                    rs.getInt("quantityValue"),
                    rs.getString("status")
                });
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading data: " + e.getMessage());
        }
    }
    private void addSearchFieldListener() {
        searchBooks.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                searchBooksActionPerformed(null);  // Call the existing method
        }

            @Override
            public void removeUpdate(DocumentEvent e) {
                searchBooksActionPerformed(null);  // Call the existing method
        }

            @Override
            public void changedUpdate(DocumentEvent e) {
                searchBooksActionPerformed(null);  // Call the existing method
        }
    });
        
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        bookTable = new javax.swing.JTable();
        searchBooks = new javax.swing.JTextField();
        deleteBTN = new javax.swing.JButton();
        sortBTN = new javax.swing.JButton();
        backBTN = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("BOOK RECORDS");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        bookTable.setBackground(new java.awt.Color(255, 204, 102));
        bookTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "bookID", "bookNumber", "Name", "Publisher", "quantityValue", "status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(bookTable);

        searchBooks.setBackground(new java.awt.Color(255, 204, 102));
        searchBooks.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        searchBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBooksActionPerformed(evt);
            }
        });

        deleteBTN.setBackground(new java.awt.Color(255, 204, 102));
        deleteBTN.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        deleteBTN.setText("DELETE");
        deleteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBTNActionPerformed(evt);
            }
        });

        sortBTN.setBackground(new java.awt.Color(255, 204, 102));
        sortBTN.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        sortBTN.setText("SORT");
        sortBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortBTNActionPerformed(evt);
            }
        });

        backBTN.setBackground(new java.awt.Color(255, 204, 102));
        backBTN.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        backBTN.setText("BACK");
        backBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 165, Short.MAX_VALUE)
                        .addComponent(backBTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sortBTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteBTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchBooks, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sortBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBooks)
                    .addComponent(jLabel1)
                    .addComponent(backBTN, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void searchBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBooksActionPerformed
        // TODO add your handling code here:
        String searchQuery = searchBooks.getText().trim();

    String sql = "SELECT * FROM book_tbl WHERE Name LIKE ? OR Publisher LIKE ?";
    try (Connection conn = new Conn().getConnection();
         PreparedStatement stmt = conn.prepareStatement(sql)) {

        stmt.setString(1, "%" + searchQuery + "%");
        stmt.setString(2, "%" + searchQuery + "%");

        ResultSet rs = stmt.executeQuery();

        DefaultTableModel model = (DefaultTableModel) bookTable.getModel();
        model.setRowCount(0);

        while (rs.next()) {
            model.addRow(new Object[] {
                rs.getInt("book_id"),
                rs.getString("BookNumber"),
                rs.getString("Name"),
                rs.getString("Publisher"),
                rs.getInt("quantityValue"),
                rs.getString("status") // Include the status column
            });
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error loading data: " + e.getMessage());
    }
    }//GEN-LAST:event_searchBooksActionPerformed

    private void deleteBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBTNActionPerformed
                                        
    // TODO add your handling code here:
        int selectedRow = bookTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            return;
    }

        int bookId = (int) bookTable.getValueAt(selectedRow, 0); // Get Book ID from the selected row

    // Show confirmation dialog
        int confirmation = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this book?", 
            "Confirm Deletion", JOptionPane.YES_NO_OPTION);

        if (confirmation == JOptionPane.YES_OPTION) {
        // Delete the record from the database
            String sql = "DELETE FROM book_tbl WHERE book_id = ?";
        try (Connection conn = new Conn().getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setInt(1, bookId);
            int rowsAffected = stmt.executeUpdate();

            if (rowsAffected > 0) {
                // Remove the row from the table (using DefaultTableModel)
                DefaultTableModel model = (DefaultTableModel) bookTable.getModel();
                model.removeRow(selectedRow);  // This will remove the row from the model
                JOptionPane.showMessageDialog(this, "Record deleted successfully.");
            } else {
                JOptionPane.showMessageDialog(this, "Failed to delete the record.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error deleting record: " + e.getMessage());
        }
        } else {
        // If the user clicks "No", do nothing and return
            JOptionPane.showMessageDialog(this, "Deletion canceled.");
    }

    }//GEN-LAST:event_deleteBTNActionPerformed

    private void sortBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortBTNActionPerformed
        // TODO add your handling code here:
        String order = isAscending ? "ASC" : "DESC";

    // SQL query to sort by book name in ascending or descending order
    String sql = "SELECT * FROM book_tbl ORDER BY Name " + order;

    try (Connection conn = new Conn().getConnection();
         PreparedStatement stmt = conn.prepareStatement(sql);
         ResultSet rs = stmt.executeQuery()) {

        // Get the table model
        DefaultTableModel model = (DefaultTableModel) bookTable.getModel();

        // Clear existing rows
        model.setRowCount(0);

        // Populate table with sorted query results
        while (rs.next()) {
            model.addRow(new Object[] {
                rs.getInt("book_id"),
                rs.getString("BookNumber"),
                rs.getString("Name"),
                rs.getString("Publisher"),
                rs.getInt("quantityValue"),
                rs.getString("status")
            });
        }

        // Toggle the sorting order for the next click
        isAscending = !isAscending;

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error sorting data: " + e.getMessage());
    }

    }//GEN-LAST:event_sortBTNActionPerformed

    private void backBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBTNActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        new Books().setVisible(true);
    }//GEN-LAST:event_backBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Record.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Record.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Record.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Record.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Record().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBTN;
    private javax.swing.JTable bookTable;
    private javax.swing.JButton deleteBTN;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchBooks;
    private javax.swing.JButton sortBTN;
    // End of variables declaration//GEN-END:variables
}
