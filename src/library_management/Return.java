/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package library_management;
import java.sql.*;
import javax.swing.JOptionPane;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;

/**
 *
 * @author Jerkeen
 */
public class Return extends javax.swing.JFrame {

    /**
     * Creates new form Return
     */
    public Return() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backBTN1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        TFbook = new javax.swing.JTextField();
        TFstudent = new javax.swing.JTextField();
        TFissue = new javax.swing.JTextField();
        TFdue = new javax.swing.JTextField();
        returnBTN = new javax.swing.JButton();
        backBTN = new javax.swing.JButton();
        searchBTN = new javax.swing.JButton();
        tfFine = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();

        backBTN1.setBackground(new java.awt.Color(255, 255, 102));
        backBTN1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        backBTN1.setText("BACK");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("RETURN BOOK");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel2.setText("Book ID:");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel3.setText("Student ID:");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel4.setText("Issue Date:");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel5.setText("Due Date:");

        TFbook.setBackground(new java.awt.Color(255, 204, 102));
        TFbook.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        TFstudent.setBackground(new java.awt.Color(255, 204, 102));
        TFstudent.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        TFissue.setBackground(new java.awt.Color(255, 204, 102));
        TFissue.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        TFdue.setBackground(new java.awt.Color(255, 204, 102));
        TFdue.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        returnBTN.setBackground(new java.awt.Color(255, 204, 51));
        returnBTN.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        returnBTN.setText("RETURN");
        returnBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnBTNActionPerformed(evt);
            }
        });

        backBTN.setBackground(new java.awt.Color(255, 204, 51));
        backBTN.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        backBTN.setText("BACK");
        backBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBTNActionPerformed(evt);
            }
        });

        searchBTN.setBackground(new java.awt.Color(255, 204, 51));
        searchBTN.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        searchBTN.setText("SEARCH");
        searchBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBTNActionPerformed(evt);
            }
        });

        tfFine.setBackground(new java.awt.Color(255, 204, 102));
        tfFine.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel6.setText("Fine:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(8, 8, 8)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TFdue)
                            .addComponent(TFissue)
                            .addComponent(tfFine)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TFstudent, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(TFbook, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(returnBTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(backBTN)
                        .addGap(42, 42, 42))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(112, 112, 112))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addGap(53, 53, 53)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(TFbook, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(TFstudent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBTN))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(TFissue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(TFdue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfFine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(returnBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void searchBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBTNActionPerformed
        // TODO add your handling code here:                                          
        String bookID = TFbook.getText().trim();
    String studentID = TFstudent.getText().trim();

    try {
        Conn c = new Conn();
        Connection conn = c.getConnection();

        String query = "SELECT issueDate, dueDate, fineAmount, returnBook FROM issue_tbl WHERE bookID=? AND studentID=?";
        PreparedStatement ps = conn.prepareStatement(query);
        ps.setString(1, bookID);
        ps.setString(2, studentID);

        ResultSet rs = ps.executeQuery();

        if (rs.next()) {
            String returnStatus = rs.getString("returnBook");
            if ("Yes".equals(returnStatus)) {
                JOptionPane.showMessageDialog(null, "This book has already been returned.");
                TFbook.setText("");
                TFstudent.setText("");
            } else {
                TFissue.setText(rs.getString("issueDate"));
                TFdue.setText(rs.getString("dueDate"));

                LocalDate dueDate = LocalDate.parse(rs.getString("dueDate"));
                LocalDate today = LocalDate.now();
                long overdueDays = ChronoUnit.DAYS.between(dueDate, today);

                if (overdueDays > 0) {
                    double fine = overdueDays * 5; // Fine calculation
                    tfFine.setText(String.valueOf(fine));
                } else {
                    tfFine.setText("0");
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "No record found for this book and student.");
        }

        rs.close();
        ps.close();
        conn.close();
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Connection error: " + e.getMessage());
    }
    

    }//GEN-LAST:event_searchBTNActionPerformed

    private void returnBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnBTNActionPerformed
        String bookID = TFbook.getText().trim();
    String studentID = TFstudent.getText().trim();

    if (bookID.isEmpty() || studentID.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Book ID and Student ID cannot be empty.");
        return;
    }

    try {
        Conn c = new Conn();
        Connection conn = c.getConnection();

        // Check if the book is issued to this student
        String checkQuery = "SELECT * FROM issue_tbl WHERE studentID = ? AND bookID = ?";
        PreparedStatement checkPs = conn.prepareStatement(checkQuery);
        checkPs.setString(1, studentID);
        checkPs.setString(2, bookID);
        ResultSet rs = checkPs.executeQuery();

        if (!rs.next()) {
            JOptionPane.showMessageDialog(null, "No record found to update. Please check the Book ID and Student ID.");
            return;
        }

        // Check for reservations
        String reservationQuery = "SELECT studentID FROM reservation_tbl WHERE bookID = ? ORDER BY reservationDate LIMIT 1";
        PreparedStatement reservationPs = conn.prepareStatement(reservationQuery);
        reservationPs.setString(1, bookID);
        ResultSet reservationRs = reservationPs.executeQuery();

        if (reservationRs.next()) {
            // Handle reservation re-issue
            String reservedStudentID = reservationRs.getString("studentID");

            String issueQuery = "INSERT INTO issue_tbl (bookID, studentID, issueDate, dueDate, returnBook) VALUES (?, ?, ?, ?, ?)";
            PreparedStatement issuePs = conn.prepareStatement(issueQuery);
            LocalDate issueDate = LocalDate.now();
            LocalDate dueDate = issueDate.plusDays(14); // Assuming 14 days loan period
            issuePs.setString(1, bookID);
            issuePs.setString(2, reservedStudentID);
            issuePs.setString(3, issueDate.toString());
            issuePs.setString(4, dueDate.toString());
            issuePs.setString(5, "No"); // Explicitly set returnBook to 'No'
            issuePs.executeUpdate();

            String deleteReservationQuery = "DELETE FROM reservation_tbl WHERE bookID = ? AND studentID = ?";
            PreparedStatement deleteReservationPs = conn.prepareStatement(deleteReservationQuery);
            deleteReservationPs.setString(1, bookID);
            deleteReservationPs.setString(2, reservedStudentID);
            deleteReservationPs.executeUpdate();

            JOptionPane.showMessageDialog(null, "Book successfully returned and issued to the next student in the queue.");

            issuePs.close();
            deleteReservationPs.close();
        } else {
            // Increment book quantity
            String updateQuantityQuery = "UPDATE book_tbl SET quantityValue = quantityValue + 1, status = 'Available' WHERE book_id = ?";
            PreparedStatement quantityPs = conn.prepareStatement(updateQuantityQuery);
            quantityPs.setString(1, bookID);
            quantityPs.executeUpdate();
            quantityPs.close();

            JOptionPane.showMessageDialog(null, "Book successfully returned.");
            setVisible(false);
            new Return().setVisible(true);
        }

        // Mark book as returned
        String returnQuery = "UPDATE issue_tbl SET returnBook = 'Yes' WHERE studentID = ? AND bookID = ?";
        PreparedStatement returnPs = conn.prepareStatement(returnQuery);
        returnPs.setString(1, studentID);
        returnPs.setString(2, bookID);
        returnPs.executeUpdate();

        // Close resources
        rs.close();
        checkPs.close();
        returnPs.close();
        reservationRs.close();
        reservationPs.close();
        conn.close();

        // Refresh the form
        TFbook.setText("");
        TFstudent.setText("");
        TFissue.setText("");
        TFdue.setText("");
        tfFine.setText("");

        JOptionPane.showMessageDialog(null, "The book has been returned and the records have been updated.");
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Connection error: " + e.getMessage());
    }
    }//GEN-LAST:event_returnBTNActionPerformed

    private void backBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBTNActionPerformed
        // TODO add your handling code here:
       Books books = new Books();
       this.setVisible(false);
       books.setVisible(true);
    }//GEN-LAST:event_backBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Return.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Return.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Return.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Return.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Return().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField TFbook;
    private javax.swing.JTextField TFdue;
    private javax.swing.JTextField TFissue;
    private javax.swing.JTextField TFstudent;
    private javax.swing.JButton backBTN;
    private javax.swing.JButton backBTN1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton returnBTN;
    private javax.swing.JButton searchBTN;
    private javax.swing.JTextField tfFine;
    // End of variables declaration//GEN-END:variables
}
